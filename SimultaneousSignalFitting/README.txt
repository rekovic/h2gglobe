-------------------------------------
Parametric Signal Fitting for H->gg
-------------------------------------
Original author: Matt Kenzie (matthew.william.kenzie@cern.ch)

This package implements fitting signal shapes to signal MC in the H->gg analysis

This code requires access to the HiggsAnalysis/CombinedLimit package.
This should be automatically cloned from github by extraTags in the h2gglobe
Makefile. 

!!!!! IT REQUIRES CMSSW_6_X_X OR HIGHER !!!!!
	- please make sure you are in an appropriate version of CMSSW

There are 4 classes which implement the standard fitting:
	- InitialFit.cc
			- fits the signal MC with a sum of Gaussians - in principal
				you can change the parametric form by adding funcitons in this class
			- this will also constrain values around a chosen mass point to help
				gurantee smooth interpolation
	- LinearInterp.cc
			- this converts the raw fit parameters at each mass to a RooSpline1D so
				that the model can be interpolated to any MH
	- FinalModelConstruction.cc
			- this constructs the final signal pdf from the individual process and
				category fits.
			- it includes all the relevants systematics which effect the mean,
				sigma and yield in each category
	- Packager.cc
			- this packages everything together into one workspace, makes some
				checks and adds pdfs together for plotting scripts later

-------------------------------------
Running the code
-------------------------------------

This code has a standalone makefile. To compile:

cd SimultaneousSignalFitting
cmsenv
make

The fits are run by test/SignalFit.cpp. After compiling this will appear as an
executable in bin/SignalFit. To a list of options run:

./bin/SignalFit -h

This should be provided with:
	- one input .root file (the output of h2gglobe signal jobs)
	- two datfiles. 
	- The first datfile (passed with option --datfilename or -d, an example is given
		in dat/newConfig.dat) instructs the code how many gaussians are required for the 
		right vertex and wrong vertex hypothesis for each signal process and diphoton category. 
	- The second datfile (passed with options --systfilename or -s, an example is given in 
		dat/photonCatSyst.dat) instructs the code on how the single photon category systematics
		(uncorrelated) should propagate through to the diphoton categories (correlated). 
		Information on how these datfiles can be generated (with test/signalFTest.cpp and test/calcPhotonSystConsts.cpp 
		respectively) is given below.

You can also choose:
	- the mass range to run in (--mhLow and --mhHigh)
	- the number of diphoton categories (--nCats)
	- the constraint value (--constraintValue)
	- the constraint value mass (--constraintValueMass)
	- whether the wzh process is split into wh/zh separately (--splitVH)

By default models are also made for:
	- Higgs Natural Width
	- Second Higgs searches
These can be turned off with --skipSecondaryModels

The code should take about an hour to run locally and should provide with you a
parametric model in the file specified under --outfilename.
You should check that the plots in the top level of the
SimultaneousSignalFitting/plots directory show good fits and a smooth
interpolation. You can also check (using scripts/checkYield.py) that the yields
and eff*acc agrees with the binned model calculation from
Macros/makeEffAcc.py.

If you want you can run with the option --skipPlots. This should speeds things
up as plotting the model takes sometime for RooFit to compute.

-------------------------------------
Setting up the datfiles
-------------------------------------

The two datfiles you need are dat/newConfig.dat and dat/photonCatSyst.dat

The first (of which dat/newConfig.dat is an example) displays for each signal
process and category how many gaussians should be fit under the right vertex 
hypothesis and under the wrong vertex hypothesis. You have to pick this by
hand but common sense should help. You can also run the SignalFit code with
the option --initialFitsOnly to get an idea of how good a fit each choice of
Gaussians is.

The second can be generated by running ./bin/calcPhotonSystConsts which
requires as input a special .root file created by h2gglobe. This special file
is made by running globe with the options splitEscaleSyst=1 and
splitEresSyst=1 or with a specific systematics_settings.dat file on one signal 
mass only (an example is given in
https://github.com/h2gglobe/h2gglobe/blob/master/AnalysisScripts/massfac_mva_binned/datafiles_massfacmva_legacy_systs.dat
). 
This will make a bunch of templates by varying individual
photon systematics separately. Make sure the options you pass to this script
(in terms of number of photon categories and their names) match what you have
in the h2gglobe config.

-------------------------------------
Making the plots
-------------------------------------

To make the plots you can use the script Macros/makeParametricSignalModelPlots.C
You need to open root and load some things before compiling it:
root
[0] gSystem->SetIncludePath("-I$ROOTSYS/include -I$ROOFITSYS/include -I$CMSSW_BASE/src");
[1] .L $CMSSW_BASE/lib/$SCRAM_ARCH/libHiggsAnalysisCombinedLimit.so
[2] .L ../libLoopAll.so
[3] .L makeParametricSignalModelPlots.C+g

Then you will be able to run the function.


GOOD LUCK!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-------------------------------------
EVERYTHING BELOW HERE IS OUT OF DATE
-------------------------------------
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


-------------------------------------
Simultaneous Signal Fitting for H->gg
-------------------------------------
To guarantee smooth interpolation of the signal parameters the fits are done simultaneously across masses
with the function parameters all taking polynomial forms as a function of mh.

The class which handles the fitting is SimultaneousFit.cc. There are two implementations:
  
  --simFit - This constructs a RooSimultanteous and fits each mc mass together with a sum of gaussians
  --mhFit  - This has an explicit dependedce on mh in the fit (as well as the usual m_{gammagamma} dependence)
           - In essesnce is a 2D fit but it doesn't work as well

Both of these fit a sum of gaussians (which can be user defined) where the parameters (mean, sigma of each gaussian 
and the f the frac of that gaussian) have a polynomial dependence on mh (which can also be user defined).

After compiling (cmsenv; make) you can run ./bin/SimultaneousSignalFit --help to see a list of options.

-------------------------------------
Runnnig the code
-------------------------------------

The run configuration is set in dat/config.dat
It lists an input file (this should be the output workspace of the MC datasets after having run globe)
It also lists a set of jobs with the outfilename, the process, the category, the number of gaussians 
and the polynomial orders of the mean, sigma and fraction separated by a single space

To submit the jobs run:

./scripts/makeJobs.py -i dat/config.dat -o $PWD/files -f 8 -q 1nh --submit

This will make a .sh script for each outfile listed in config.dat, put it in scripts/jobs and submit it to lxbatch.
It will also make a file scripts/jobs/filestocombine.dat which tells a later script how to package up the jobs.

You can check the status with:

./scripts/checkJobs.py scripts/jobs

They should complete in about 15 mins

When they are complete the output will be packaged into a single workspace called CMS-HGG_sigfit.root
This is one can be used with combine

-------------------------------------
Details
-------------------------------------

You can set the starting values of the polynomial paramaters in dat/variables_map.dat
The nuisance parameters are implemented with a constant smearing value subtracted first. 
These values are defined in dat/smear_vals.dat

The fits are run by the utility script test/SimultaneousSignalFit.cpp
  
  -- the fitting is done by the function SimultaneousFit::runFit()
  -- an independent fit at each mass is done first to find nice starting values (this is highly recommended)
  -- then either the simFit or mhFit is run
  -- at the end a finalPdf is built from the fit results as various attributes of the pdfs need to be changed (e.g including nuisance
     params) 
  -- the number of entries, eff*acc and expected entries for 1pb are calculated as functions of mh (using further simple polynomial fits)
     which allows us to define how many sm signal events we expect for a given mh

The output is packaged at the end by test/PackageOutput.cpp

  -- in general this will try and sum up everything that is there (regardless of failed jobs, or jobs that haven't been run)
  -- it should warn you if a pdf or a dataset is missing
  -- this also combines datasets and pdfs across categories and processes which allow extraction of quantities like FWHM and sig_eff
     using the globe script Macros/makeParametricSignalModelPlots.C

Additional classes can be added to interface and src and they should be automatically included in the compile.
Additional scripts can be added to test (under extension .cpp) and they should be automatically included in the compile.

One obvious place for development is to expand the functions SimultaneousFit::getSumOfGaussians to have the ability to use
other shapes (e.g. CBxGaus or whatever)


